name: cmake-release

env:
  CTEST_NO_TESTS_ACTION: error
  CTEST_PARALLEL_LEVEL: 0
  CMAKE_BUILD_PARALLEL_LEVEL: 4
  HOMEBREW_NO_INSTALL_CLEANUP: 1

on:
  push:
    tags:
      - "*"

jobs:
  release:
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Extract tag name
        id: tag
        uses: actions/github-script@0.2.0
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            return context.payload.ref.replace(/\/refs\/tags\//, '');
      - name: create release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: ${{ steps.tag.outputs.result }}
          tag_name: ${{ github.ref }}
          body_path: CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}
    outputs:
      out_tag: ${{ steps.tag.outputs.result }}
      out_url: ${{ steps.create_release.outputs.upload_url }}

  build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    needs: release

    steps:
      - uses: actions/checkout@v4
      - name: config cmake
        run: >-
          cmake
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE=""
          -Bbuild
      - name: build
        run: cmake --build build --config Release
      - name: setup OS
        id: setup_os
        run: |
          if [ "$RUNNER_OS" == "Linux" ]; then
               echo "os=linux" >> "$GITHUB_OUTPUT"
               echo "file=build/bin/libqwad.so" >> "$GITHUB_OUTPUT"
          elif [ "$RUNNER_OS" == "macOS" ]; then
               echo "os=macos" >> "$GITHUB_OUTPUT"
               echo "file=build/bin/libqwad.dylib" >> "$GITHUB_OUTPUT"
          elif [ "$RUNNER_OS" == "Windows" ]; then
               choco install zip
               echo "os=win" >> "$GITHUB_OUTPUT"
               echo "file=build\src\qwad.dll" >> "$GITHUB_OUTPUT"
          else
               echo "$RUNNER_OS not supported"
               exit 1
          fi
        shell: bash
      - name: pack
        run: zip -j libqwad-${{ steps.setup_os.outputs.os }}.zip ${{ steps.setup_os.outputs.file }}
      - name: upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{needs.release.outputs.out_url}}
          asset_path: ./libqwad-${{ steps.setup_os.outputs.os }}.zip
          asset_name: libqwad-${{ steps.setup_os.outputs.os }}.zip
          asset_content_type: application/zip
